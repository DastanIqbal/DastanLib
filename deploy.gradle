apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def siteUrl = 'https://dastanApps.com'
def gitUrl = 'https://gitlab.com/dastanIqbal/DastanLib.git'
group = "com.dastanapps.dastanlib"

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id 'ask2iqbal'
            name 'Iqbal Ahmed'
            email 'ask2iqbal@gmail.com'
        }
    }

    scm {
        connection gitUrl
        developerConnection gitUrl
        url gitUrl
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        Production(MavenPublication) {
            pom.withXml {
                // Define this explicitly if using implementation or api configurations
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        root.children().last() + pomConfig
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
//    options.encoding = 'UTF-8'
}
artifacts {
    //   archives javadocJar
    archives sourcesJar
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    print "Artificat Name ${rootProject.ext.artifact}"
    if (rootProject.ext.artifact == "undefined") {
        throw new GradleException('Artificat name not Defined')
    } else {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        configurations = ['archives']
        pkg {
            repo = "maven"
            name = rootProject.ext.artifact
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = ["Apache-2.0"]
            publish = false
        }
        publications = ['Production']
    }
}