task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = "com.dastanapps.dastanlib"
version = this.version

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

nexusStaging {
    packageGroup = group
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId this.group
                artifactId project.getName()
                version this.version
//            println("$buildDir/outputs/aar/${project.getName()}-debug.aar")
                artifact("$buildDir/outputs/aar/${project.getName()}-debug.aar")

                //artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom {
                    name = this.group
                    description = 'Dastan Library'
                    url = 'https://github.com/DastanIqbal/DastanLib'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'dastanIqbal'
                            name = 'Iqbal Ahmed'
                            email = 'ask2iqbal@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/DastanIqbal/DastanLib.git'
                        developerConnection = 'scm:git:ssh://github.com/DastanIqbal/DastanLib.git'
                        url = 'https://github.com/DastanIqbal/DastanLib/tree/master'
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"

                def releasesRepoUrl = "https://s01.oss.sonatype" +
                        ".org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}


//./gradlew publishReleasePublicationToSonatypeRepository
// closeAndReleaseSonatypeStagingRepository